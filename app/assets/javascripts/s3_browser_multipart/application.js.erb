// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery_ujs

//Variables

//Keeps the information of current uploads
//The filename is the key in the object 
S3BrowserMultipart.prototype.currentUploads={}
S3BrowserMultipart.prototype.uploadsPath='<%= S3BrowserMultipart::Engine.routes.url_helpers.uploads_path %>';
//Sufix under uploadPath for post every part
S3BrowserMultipart.prototype.uploadsPartPath="/upload_parts";
//retry assemble counter
S3BrowserMultipart.prototype.asembleFileFailCounter= 0 ;
//Result
S3BrowserMultipart.prototype.uploadedKey= null;
//Messages
S3BrowserMultipart.prototype.messages={
  filesize_exceeded: "File size exceeded the maximum allowed"
}

function S3BrowserMultipart(){
  //Detect file selection 
  $('input.file_uploader').change(function(){
    self = this;
    $.each(this.files,function(idx,file){
      if(S3BrowserMultipart.prototype.validateSelectedFile(file, $(self).data())){
        $(self).prop('disabled', true).addClass('file_input_disabled');
        $.ajax({
          type: "POST",
          dataType: "json",
          url: S3BrowserMultipart.prototype.uploadsPath,
          data: jQuery.extend({size: file.size, name: file.name.replace(/[^a-z0-9.\s]/gi, '_'), type: file.type}, $(self).data()),
          success: S3BrowserMultipart.prototype.uploadCreation
        });
        S3BrowserMultipart.prototype.initializeProgress();
      }
    });
  });
}
//Validate selected file
S3BrowserMultipart.prototype.validateSelectedFile=function(file, data){
  if(file.size > data.maxFileSize ){
    S3BrowserMultipart.prototype.alertFunction(S3BrowserMultipart.
      prototype.messages.filesize_exceeded);
    return false; 
  }
  return true;
}

S3BrowserMultipart.prototype.alertFunction=function(arg){alert(arg)};
//Show progress bar and texts
S3BrowserMultipart.prototype.initializeProgress = function(){
    $('.file_progress').show();
    $('.file_progress .message').html('Making digital signature');
}

S3BrowserMultipart.prototype.startProgress = function(signData, file){
  $('.file_progress .message').html('Start to send data');
  slice = S3BrowserMultipart.prototype.calculateSlice(1, 
    signData.chunk_size, file.size);
  $('.file_progress .total_parts').html(slice.partCount);
  $('.file_progress .part_progress').html('0');
}

//Start uploading first part after get digital signature
S3BrowserMultipart.prototype.uploadCreation = function (signData){
 

  self = $('input.file_uploader')[0];
  $.each(self.files,
    function(idx,file){
      if(file.name.replace(/[^a-z0-9.\s]/gi, '_') == signData.name && $(self).data('secureRandom')==signData.secure_random ){
        S3BrowserMultipart.prototype.startProgress(signData, file);
        S3BrowserMultipart.prototype.uploadPart(1, signData, file)
      }
  });
}

//Gets and initialize current uploads
S3BrowserMultipart.prototype.getCurrentUploads=function(signData, file){
  if(undefined == S3BrowserMultipart.prototype.currentUploads[file.name.replace(/[^a-z0-9.\s]/gi, '_')]){
    S3BrowserMultipart.prototype.currentUploads[file.name.replace(/[^a-z0-9.\s]/gi, '_')]={file: file, signData: signData}
  }
  return S3BrowserMultipart.prototype.currentUploads[file.name.replace(/[^a-z0-9.\s]/gi, '_')];
}

//at the moment only works with 1 upload at the same time
S3BrowserMultipart.prototype.getCurrentUpload = function(){
  for (var first in S3BrowserMultipart.prototype.currentUploads) 
    return S3BrowserMultipart.prototype.currentUploads[first];
  
}

/*
Upload part 
partNumber can be 1 up to 10000
*/
S3BrowserMultipart.prototype.uploadPart = function (partNumber, signData, file){
  uploadInfo = S3BrowserMultipart.prototype.getCurrentUploads(signData, file)
  uploadInfo['partNumber']=partNumber;
  slice = S3BrowserMultipart.prototype.calculateSlice(partNumber, signData.chunk_size, file.size)
  
  var formData = new FormData();
  partFields = {};
  jQuery.extend(partFields, signData.upload.fields,
    {key: signData.upload.part_prefix+partNumber});
  for(var field in partFields){
    formData.append(field, partFields[field]);
  }
  formData.append('file',file.slice(slice.start,slice.end));
  jQuery.support.cors = true;
  $.ajax({
      url: signData.upload.url,  //Server script to process data
      type: 'POST',
      xhr: function() {  
          var myXhr = $.ajaxSettings.xhr();
          if(myXhr.upload){ 
              myXhr.upload.addEventListener('progress',
                S3BrowserMultipart.prototype.partUploadProgress, false); 
          }
          return myXhr;
      },
      //Ajax events
      //beforeSend: beforeSendHandler,
      success: S3BrowserMultipart.prototype.partUploaded,
      error: S3BrowserMultipart.prototype.partUploadFail,
      // Form data
      data: formData,
      //Options to tell jQuery not to process data or worry about content-type.
      cache: false,
      contentType: false,
      processData: false
  });
  $('.file_progress .message').html('Uploading part: '+partNumber);
}

/*
  Upload progress in each part, update .progress_bar, .progress_percentaje and .byte_progress
*/
S3BrowserMultipart.prototype.partUploadProgress = function(arg){
  try{
    uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();
    currentByte = (uploadInfo.signData.chunk_size*(uploadInfo.partNumber-1))+arg.loaded; 
    if(currentByte > uploadInfo.file.size){
      currentByte = uploadInfo.file.size;
    }
    $('.file_progress .progress_bar').attr('max', uploadInfo.file.size).
      attr('value',currentByte);
      percentaje = Math.round((currentByte*1000.0)/uploadInfo.file.size)/10.0; 

    $('.file_progress .progress_percentaje').html(""+percentaje+" %");
    $('.file_progress .byte_progress').html(""+currentByte+" / "+ uploadInfo.file.size );

  }
  catch(error){
    console.log(error);
  }
}


/*
  When part upload fail and need to retry
*/
S3BrowserMultipart.prototype.partUploadFail = function(arg){
  uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();
  $('.file_progress .message').html('Error reloading part : '+uploadInfo.partNumber + ' retrying in 10 seconds');
  window.setTimeout(function(){
    uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();
    S3BrowserMultipart.prototype.uploadPart(uploadInfo.partNumber,
      uploadInfo.signData,uploadInfo.file);
  },10000);

}
//Show progress in .part_progress
S3BrowserMultipart.prototype.showProgressUploadedPart = function(arg){
  $('.file_progress .part_progress').html(arg.partNumber);
}
/*
Part uploaded successfully and calls next part (must call events)
At the moment only support 1 upload at the same time
*/
S3BrowserMultipart.prototype.partUploaded = function (s3Data){
  file_key=s3Data.getElementsByTagName("Key")[0];
  uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();
  slice = S3BrowserMultipart.prototype.calculateSlice(uploadInfo.partNumber, 
    uploadInfo.signData.chunk_size,uploadInfo.file.size);
  S3BrowserMultipart.prototype.reportUploadedPart(uploadInfo,file_key);

  S3BrowserMultipart.prototype.showProgressUploadedPart({partNumber: uploadInfo.partNumber,
    partCount: slice.partCount, s3Data: s3Data});
  //More parts ?
  if(uploadInfo.partNumber < slice.partCount){
    //Call next file upload
    S3BrowserMultipart.prototype.uploadPart(uploadInfo.partNumber+1,
      uploadInfo.signData,uploadInfo.file);
  }
}


//assemble file at amazon s3
S3BrowserMultipart.prototype.asembleFile = function(signData, file){
  $('.file_progress .message').html('Assembling file ...');
  console.log('Assembling')
  assemble_path= S3BrowserMultipart.prototype.
    uploadsPath + '/'+signData.upload.upload_id;
  $.ajax({
        type: "PUT",
        dataType: "json",
        url: assemble_path,
        data: {secureRandom: signData.secure_random},
        success: S3BrowserMultipart.prototype.asembledFile,
        error: S3BrowserMultipart.prototype.asembleFileFail
      });
}


//Fail assembling
S3BrowserMultipart.prototype.asembleFileFail = function(arg){
  if(S3BrowserMultipart.prototype.asembleFileFailCounter< 3){
    $('.file_progress .message').html('Error assembling file retrying in 20 seconds');
    setTimeout(function(){
      uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();
      S3BrowserMultipart.prototype.asembleFile(uploadInfo.
        signData,uploadInfo.file)
    }, 20000)
    S3BrowserMultipart.prototype.asembleFileFailCounter++;
  }
}


//Reports to the server each part uploaded for assemble it to the main file
S3BrowserMultipart.prototype.reportUploadedPart = function(uploadInfo,file_key){
  upload_part_path = S3BrowserMultipart.prototype.uploadsPath + '/' + 
    uploadInfo.signData.upload.upload_id + S3BrowserMultipart.
    prototype.uploadsPartPath;
  $.ajax({
    type: "POST",
    dataType: "json",
    url: upload_part_path,
    data: {
      secure_random: uploadInfo.signData.secure_random, 
      file_key: file_key.firstChild.nodeValue
    },
    success: S3BrowserMultipart.prototype.reportedUploadedPart,
    error: S3BrowserMultipart.prototype.failReportUploadedPart
  });
} 

//reportUploadedPart Success, only after last part is
S3BrowserMultipart.prototype.reportedUploadedPart = function(arg){
  uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();

  slice = S3BrowserMultipart.prototype.calculateSlice(uploadInfo.partNumber, 
    uploadInfo.signData.chunk_size,uploadInfo.file.size);
  //More parts ?
  if(arg.part_number == slice.partCount){
    S3BrowserMultipart.prototype.asembleFile(uploadInfo.signData,uploadInfo.file);
  }

}

//reportUploadedPart Fail 
S3BrowserMultipart.prototype.failReportUploadedPart = function(arg){

}


//Calculate the start and end bytes for a slice
S3BrowserMultipart.prototype.calculateSlice =function (partNumber, chunkSize, fileSize){
  partCount = Math.ceil(fileSize/chunkSize)
  if(fileSize < chunkSize){
    //1 part with whole file
    return {start: 0, end: fileSize, partCount: partCount};
  }

  if(partNumber < 1 || partNumber > partCount ){
    throw "partNumber invalid";
  }
  interval = {}
  interval['start'] = chunkSize * (partNumber-1);
  interval['end'] = (chunkSize * (partNumber));
  if(interval.end > fileSize){
    interval['end'] = fileSize;
  }
  interval['partCount']=partCount
  return interval;

}

//Evaluate browser compatibility
S3BrowserMultipart.prototype.confirmBrowserCompatibility = function (){
  return (window.File && window.FileReader && 
    window.FileList && window.Blob);
}

//Override this method for perform other actions
S3BrowserMultipart.prototype.asembledFile = function(arg){
  uploadInfo=S3BrowserMultipart.prototype.getCurrentUpload();
  S3BrowserMultipart.prototype.currentUploads=null;
  S3BrowserMultipart.prototype.uploadedKey = arg.object_key; 
  S3BrowserMultipart.prototype.fileUploaded(arg, uploadInfo.file);
  $('.file_progress .message').html('File assembled '+arg.object_key);
}

//Setup support
$(function(){
  if (!S3BrowserMultipart.prototype.confirmBrowserCompatibility()){
    alert('Browser not soported');
    return ;
  }
  S3BrowserMultipart();
})

//File uploaded event. Customize it 
S3BrowserMultipart.prototype.fileUploaded = function(arg, file){
  
}